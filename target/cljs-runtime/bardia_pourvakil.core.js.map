{"version":3,"sources":["bardia_pourvakil/core.cljs"],"mappings":";;;;;AAKA,AAAKA,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAaH,AAAA,AAAMC,AAAaC;AAAnB,AAAA,AAAA,AAEG,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAk6EgD,AAAA4B,AAAAjC;AAl6EhDM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AACS,AAAA,AAAQY,AAAY,AAAA,AAAK,AAAA,AAAQA,AAAY,AAAA,AAASA;;AAD/D,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAnB,AACS,AAAA,AAAQoB,AAAY,AAAA,AAAK,AAAA,AAAQA,AAAY,AAAA,AAASA;;;AAD/D;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAAWD;;;AAId,AAAA,AAAMuB;AAAN,AACE,AAAMC,AAAa,AAAAC,AAAC,AAAA,AAAAC,AAAA,AAAA,AAACC,AAAQ9B;AAAV,AAAA,AAAA4B,AAAAA,AAAA,AAAAA,AAAA;;AACbG,AAAY,AAAAC,AAAC,AAAA,AAAAH,AAAA,AAAA,AAACC,AAAQ9B;AAAV,AAAA,AAAAgC,AAAAA,AAAA,AAAAA,AAAA;;AADlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGQ,AAAA,AAAA,AAAAH,AAAS7B,AAEF,AAAA,AAAO2B,AAAa,AAAA,AAAOA,AAE3B,AAAA,AAAOI,AAAc,AAAA,AAAOA,AAEvC7B,AAAY,AAAA,AAAA2B,AAAA,AAAA,AAAA,AAACC,AAAQ9B;;AAE3B,AAAA,AAAuBiC;AAAvB,AACE,AAAA,AAACC,AAAaR,AAAK,AAAA,AAACS;;AAEtB,AAAA,AAAMC;AAAN,AACE,AAAA,AAACC;;AACD,AAACJ","names":["bardia-pourvakil.core/state","cljs.core.atom","bardia-pourvakil.core/book-lister","books","iter__4582__auto__","s__32887","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__32889","cljs.core/chunk-buffer","i__32888","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32886","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","book","bardia-pourvakil.core/app","grant-tree","fexpr__32890","cljs.core/deref","cljs.core.get_in","gda-capital","fexpr__32891","bardia-pourvakil.core/start","reagent.dom.render","js/document.getElementById","bardia-pourvakil.core/init","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns bardia-pourvakil.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [clojure.string :as str]))\n\n(def state\n  (atom\n   {:title \"Hi, I'm Bardia Pourvakil\"\n    :work [{:name \"GrantTree\"\n            :place \"London, UK\"\n            :link \"https://www.granttree.co.uk\"}\n           {:name \"GDA Capital\"\n            :place \"Toronto, CA\"\n            :link \"https://gda.captial\"}]\n    :favourite {:books [{:title \"Antifragile\"\n                         :author \"Nassim Taleb\"}\n                        {:title \"Impro\"\n                         :author \"Keith Johnstone\"}]}}))\n\n(defn book-lister [books]\n  [:ul\n   (for [book books]\n     ^{:key (:title book)} [:li (str (:title book) \" - \" (:author book))])])\n\n\n(defn app []\n  (let [grant-tree   ((get-in @state [:work]) 0)\n        gda-capital ((get-in @state [:work]) 1)]\n    [:div\n     [:h1 (:title @state)]\n     [:p \"I write for grants for \"\n      [:a {:href (:link grant-tree)} (:name grant-tree)] \".\"]\n     [:p \"I do blockchain content marketing for \"\n      [:a {:href (:link gda-capital)} (:name gda-capital)] \".\"]\n     [:h2 \"Favourite books\"]\n     [book-lister (get-in @state [:favourite :books])]]))\n\n(defn ^:dev/after-load start []\n  (rdom/render [app] (js/document.getElementById \"app\")))\n\n(defn init []\n  (js/console.log \"init\")\n  (start))\n"]}